<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Color</title>
    <link>http://localhost:1313/tags/blog/</link>
    <description>Recent content in Blog on Color</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Feb 2023 01:55:39 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Third Post</title>
      <link>http://localhost:1313/posts/kubernetes-probes-and-why-they-matter-for-autoscaling/</link>
      <pubDate>Tue, 14 Feb 2023 01:55:39 +0800</pubDate>
      <guid>http://localhost:1313/posts/kubernetes-probes-and-why-they-matter-for-autoscaling/</guid>
      <description>Kubernetes Probes (and Why They Matter for Autoscaling)&amp;nbsp;¶ K8s 探针以及与自动扩缩容的关系&amp;nbsp;¶ 为了确认线上应用的健康状态，可以使用探针来监控和采集其他影响容器的信息。&#xA;确认运行在 K8s 上的工作应用的状态健康对于应用的运行起到决定性作用。为了管理不同工作负载的健康状态，通过采集操作系统和应用组件并集中在监控工具上来实现信息的遥测和后续诊断。一旦有变动，这份监测数据可以分享给多个角色，包括系统管理者、DevOps 团队、SRE团队等，帮助他们决策和应对。&#xA;采集遥测信息的一种方案是使用探针机制。探针进程可以进行诊断检查，因此健康探针可以确认应用是可用并持续工作状态，从 load balancer 传递到指定终端，如 web应用集合。如果探针正常工作情况下，终端没有对应响应，load balancer 会忽略该错误终端而不是传递给用户错误内容。&#xA;可以使用 K8s 探针机制来完成在 K8s 内的多种检查。Probe 进程作为运行在每个 K8s 节点的主节点 agent，由 kubelet 周期性的作用于工作容器。K8s 探针允许用户确认集群内的 Pods 状态。为了确保工作应用的监控与功能可用，可以使用 K8s 探针来监测和采集一些影响容器的事件，如自动扩缩。&#xA;本文章会详解不同种类的探针和其主要侧重，讨论探针如何工作并且如何作用于 autoscaling。然后会着重于探针的正确配置，并解释有效实验是调整探针配置的关键。&#xA;有效利用 K8s 探针&amp;nbsp;¶ 不同种类的 K8s 探针&amp;nbsp;¶ 在开始探索如何有效使用 K8s 探针之前，需要使用者熟悉三种 K8s 探针类型：&#xA;startup readiness liveness startup&amp;nbsp;¶ Startup 探针是最先运行的探针，可以通知 kubelet 应用容器是否成功启动，其余两种探针会被暂时停用，直到 startup 探针指示为成功状态。&#xA;例： 当需要监测容器的慢启动时，假如使用 liveness 探针，应用可能因为对启动的错误判断而被过早 terminated，而使用 startup 探针可以准确有效判断容器启动。&#xA;readiness&amp;nbsp;¶ Readiness 探针提供了 Kubernetes 集群中容器是否可以接受请求，承接流量的信息。 当 readiness 探针处于失败状态，不会有网络请求送至 pod。所以，该 pod 会从相关 service 中移除。</description>
    </item>
    <item>
      <title>My Second Post</title>
      <link>http://localhost:1313/posts/my-second-post/</link>
      <pubDate>Sun, 27 Nov 2022 01:52:20 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-second-post/</guid>
      <description> 词性&amp;nbsp;¶ 单词是构成句子的最小单位，每一个在句子中的单词都有词性。&#xA;词性按组成的重要性可以分为：&#xA;重点 实词：[[#名词 n.]]、[[#副词 adverb]]、[[#形容词 adjective]]、[[#动词 verb]] 虚词：[[#介词 prep.]]、[[#连词 conj.]]、[[#冠词 art.]] 非重点 [[#代词 pron.]]、[[#数词 num.]]、[[#感叹词 interj.]] 代词 pron.&amp;nbsp;¶ 数词 num.&amp;nbsp;¶ 感叹词 interj.&amp;nbsp;¶ 名词 n.&amp;nbsp;¶ 动词 verb&amp;nbsp;¶ 形容词 adjective&amp;nbsp;¶ 副词 adverb&amp;nbsp;¶ 冠词 art.&amp;nbsp;¶ 介词 prep.&amp;nbsp;¶ 连词 conj.&amp;nbsp;¶ </description>
    </item>
    <item>
      <title>PGO</title>
      <link>http://localhost:1313/posts/pgo/</link>
      <pubDate>Sun, 27 Nov 2022 01:52:20 +0800</pubDate>
      <guid>http://localhost:1313/posts/pgo/</guid>
      <description>Profile-Guided Optimization&amp;nbsp;¶ PGO 类似于一种基于 CPU pprof 的编译优化机制，将本次或之前的 CPU pprof 文件用于优化下一次编译，如针对频繁调用的函数，编译器可以更果断的将其内联。&#xA;Collecting profiles&amp;nbsp;¶ Profiles generated by the Go runtime (such as from runtime/pprof and net/http/pprof) can be used directly as the compiler input. It may also be possible to use/convert profiles from other profiling systems.&#xA;For best results, it is important that profiles are representative of actual behavior in the application’s production environment. Thus, collecting profiles directly from the production environment is recommended, and is the primary method that Go’s PGO is designed for.</description>
    </item>
    <item>
      <title>My First Post</title>
      <link>http://localhost:1313/posts/my-first-post/</link>
      <pubDate>Sun, 27 Nov 2022 01:09:07 +0800</pubDate>
      <guid>http://localhost:1313/posts/my-first-post/</guid>
      <description>2 月 1 号发布的 Go 1.20 中有一些改动，其中，预定义的 comparable 类型约束会适用于所有的可比较类型（comparable type）。令人惊讶的是，在 Go 1.20 之前，一些可比较的类型并不满足可比较性！&#xA;如果你对可比较类型抱有疑问，那来对地方了。&#xA;思考下列有效 map 定义：&#xA;var lookupTable map[any]string 该 map 的 key 为 any（是可比较类型）。在 Go 中这会正常通过，另一方面，在 Go 1.20 前，可以用泛型改成类似这样：&#xA;type genericLookupTable[K comparable, V any] map[K]V 看起来能像常规的 map 来使用。但当使用 any 来作为 map 的 key 时会报出编译错误。&#xA;var lookupTable genericLookupTable[any, string] // ERROR: any does not implement comparable (Go 1.18 and Go 1.19) 从 Go 1.20 开始，这个代码会编译正常。&#xA;在 Go 1.20 前 comparable 类型的表现会十分恼人，因为当我们最初希望写泛型库时，它会阻止我们使用泛型。 计划写 maps.</description>
    </item>
  </channel>
</rss>
